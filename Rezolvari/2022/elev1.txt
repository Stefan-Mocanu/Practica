Subiectul 1:
1. c)
2. d)
3. a) 
4. c)
5. a)

Subiectul 2:
1.
a) 4
b) 11, 17
c) 
#include <iostream>
using namespace std;
unsigned int n,k,i;
int main()
{
    cin>>n;
    i=2;
    k=0;
    while(n>=i)
    {
        while(n%i==0)
        {
            k+=1;
            n/=i;
        }
        if (i==2)
            i++;
        else
            i+=2;
    }
    cout<<k;
    return 0;
}
d)
citeste n (numar natural)
i<-2; k<-0
cat timp n>=1 executa
{
   executa
   {
       k<-k+1
       n<-n/i
   }cat timp n%i=0
   daca i=2 atunci i<-i+1
   altfel i<-i+2
}
scrie k
2. 2022, 2010
3. 
#include <iostream>
#include <string.h>
using namespace std;
char s[51], id[55];
int main()
{
    cin.get(s,51);
    char *spatiu = strchr(s,' ');
    strcpy(id,spatiu);
    strcat(id,"2022");
    cout<<id;
    return 0;
}
Subiectul 3:
1.
void secventa(int &n)
{
    int a=n,p=1,c;
    
    n=0;
    bool ok=false;
    while (a>0)
    {
        c=a%10;
        
        if (c==2 && !ok)
        {
            ok=true;
            n=c*p+n;
        }   
        else if (c==2 && ok)
        {
            n=20*(p/10)+n%(p/10);
            ok=false;
        }
        else
        {
            n=c*p+n;
            ok=false;
        }
        p*=10;
        a/=10;
    }
    
}
2. 
#include <iostream>
using namespace std;

int n,m,plaja[100][100],k;
int minim(int i, int j)
{
    int minim=11;
    if(i>0)
        if (minim > plaja[i-1][j])
            minim=plaja[i-1][j];
    if(j>0)
        if (minim > plaja[i][j-1])
            minim=plaja[i][j-1];
    if(i<m-1)
        if (minim > plaja[i+1][j])
            minim=plaja[i+1][j];
    if(j<n-1)
        if (minim > plaja[i][j+1])
            minim=plaja[i][j+1];
    return minim;
}
int main()
{
    cin>>m>>n;
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
            cin>>plaja[i][j];
    for(int i=0;i<m;i++)
        for(int j=0;j<n;j++)
            if(minim(i,j)>plaja[i][j] && minim(i,j)!=11)
                k=k+minim(i,j)-plaja[i][j];
    cout<<k;
    return 0;
}
3.
b)
#include <iostream>
#include <fstream>
using namespace std;
ifstream f ("bac.txt");
int main()
{
    int x,y,z,k=0,ct=-1;
    f>>x>>y;
    while(f>>z)
    {
        if (z>y)
            break;
        if(z>=x)
        {
            if(ct!=z)
            {
                k++;
                ct=z;
            }
        }
    }
    cout<<k;
    return 0;
}
a) Programul parcurge sirul pana la prima valoare mai mare ca y(capatul din dreapta al intervalului), cautand initial valorile care apartin intervalului [x,y], si apoi verificand daca acesta a mai fost contorizat sau nu. Deoarece sirul este ordonat crescator, rezulta ca fiecare valoare distincta va fi mai mare decat cea anterior gasita, verificand acest lucru cu ajutorul variabilei ct.
Programul este eficient deoarece parcurge doar o data sirul dat, pana la prima pozitie in care numarul citit este mai mare decat intervalul cautat, complexitatea parcurgerii fiind mai mica de O(n), respective O(indexul primului numar mai mare ca y). Programul este eficient si din punct de vedere al memoriei utilizate, valorile nefiind retinute intr-un vector.  
