ITEM	RĂSPUNS PROPRIU
1.1.	c
1.2.	d
1.3.	a
1.4.	b
1.5.	c
2.1.a.	4
2.1.b.	5.0, 17
2.1.c.	#include <iostream>
using namespace std;

int main()
{
    int n, i, k;
    cin >> n;
    i = 2; k = 0;
    while (n >= i)
    {
        while (n % i == 0)
        {
            k = k + 1;
            n = n / i;
        }
        if (i == 2)
            i = i + 1;
        else
            i = i + 2;
    }
    cout << k;
    return 0;
}
2.1.d.	
citeşte n
(număr natural)
 i<-2; k<-0
┌cât timp n≥i execută
│┌repetă
││ k<-k+1
│ │n<-[n/i]
│└până când n%i≠0
│┌dacă i=2 atunci i<-i+1
││altfel i<-i+2
│└■
└■
 scrie k
2.2.	2023, 2026
2.3.	char* p = strchr(s, ' ');
strcpy(id, p + 1);
strcat(id, "2022");
3.1.	void secventa(int& n) 
{
    int N = n, p = 1, c;
    n = 0;
    while (N != 0)
    {
        c = N % 10;
        if (c == 2 && n / (p / 10) == 2)
            n = n % (p / 10);
        n = n + c * p;
        N /= 10;
        p *= 10;
    }
}
3.2.	#include <iostream>
using namespace std;

int a[105][105], m, n;

int main()
{
    int raspuns = 0, minim;
    cin >> m >> n
    for (int i = 1; i <= m; i++)
        for (int j = 1; j <= n; j++)
            cin >> a[i][j];
    for(int i = 1; i <= m;i++)
        for (int j = 1; j <= n; j++)
        {
            minim = 11;
            if (i > 1 && a[i - 1][j] < minim)
                minim = a[i - 1][j];

            if (i < m && a[i + 1][j] < minim)
                minim = a[i + 1][j];

            if (j > 1 && a[i][j - 1] < minim)
                minim = a[i][j - 1];

            if (j < n && a[i][j + 1] < minim)
                minim = a[i][j + 1];

            if(minim > a[i][j])
                raspuns = raspuns + (minim - a[i][j]);
        }
    cout << raspuns;
    return 0;
}
3.3.a.	O soluție posibilă se bazează pe faptul că numerele sunt ordonate crescător. Astfel, se citesc numerele unul cate unul, iar la fiecare pas se reține și cel citit anterior (ant), se verifică dacă numerele sunt distincte, iar in caz afirmativ se verifică daca numărul citit(nr) este din intervalul [x,y], și crește solutia.

Algoritmul prezentat este eficient din punct de vedere al memoriei utilizate, deoarece au fost declarate doar date de tip simplu.

Algoritmul prezentat este eficient din punct de vedere al timpului de execuție, deoarece numerele au fost parcurse o singura dată, la citire, algoritmul având complexitate liniară.
3.3.b	#include <iostream>
#include <fstream>
using namespace std;

ifstream fin("bac.txt");

int main()
{
    int x, y, nr, ant = 0, sol = 0;
    fin >> x >> y;
    fin >> ant;
    if (x <= ant && ant < y)
        sol++;
    while (fin >> nr)
    {
        if (nr != ant)
            if (x <= nr && nr <= y)
                sol++;
        ant = nr;
    }
    cout << sol;
    return 0;
}