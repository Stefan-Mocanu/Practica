Subiectul I:
    1.c
    2.a
    3.a
    4.b
    5.b

Subiectul II:
    1)
        a. 4
        b. 11, 103
        c. 
            #include <iostream>
            using namespace std;
            int main() {
                cin >> b;
                i = 2; k = 0;
                while(n >= i) {
                    while(n % i == 0) {
                        k++;
                    }
                    if(i == 2) i++;
                    else i += 2;
                }
                return 0;
            }
        d. 
            citeste n (numar natural)
            i <- 2; k <- 0
            cat timp n >=  i executa
            |    repeta
            |    |    daca n % i = 0 atunci
            |    |    |    k <- k + i
            |    |    |    n <- [n / i]
            |    |    ->
            |    -> pana cand n % i != 0
            |    daca i = 2 atunci i <- i + 1
            |    |    altfel i<- i + 2
            |    ->
            ->
            scrie k
    
    2)  x apartine {2020, 2022}
    
    3)  
        int i, k = 0;
        for(i = 0; s[i] != 0 and s[i] != " "; i++) ;
        for (; s[i] != 0; i++)
            id[k++] = s[i];
        id[k] = NULL; // sau 0

Subiectul III:
    1)
        void secventa(int n) {
            int cifre[10];
            int k, i;
            k = 0;
            while(n >= 0) {
                cifre[k++] = n % 10;
                n /= 10;
            }
            i = k - 1;
            while(i >= 0) {
                n = n * 10 + cifre[i]; //prima cifra (2 sau oriceare alta)
                if(i > 0 and cifre[i] == 2 and cifre[i - 1] == 2) {
                    n *= 10;
                    i += 2;
                } else i++;
            }
        }
    
    2)
        #include <iostream>
        
        using namespace std;

        int nisipAdaugat(int i, int j) {
            int dx[] = {-1, 0, 0, 1};
            int dy[] = {0, -1, 1, 0};
            int s = 0, minim;
            for(int k = 0; k < 4; k++) {
                minim = 11; //valoare maxima matrice + 1
                if(a[i][j] > a[dx[k] + i][dy[k] + j])
                    return 0;
                minim = min(a[dx[k] + i][dy[k] + j], minim);
            
                s += minim - a[i][j];
            }
            return s;
        }

        int main() {
            cin >> m >> n;
            int i, j;
            for(i = 0; i < m; i++)
                for(j = 0; j < n; j++)
                    cin >> a[i][j];
            int s = 0;
            for(i = 0; i < m; i++)
                for(j = 0; j < n; j++)
                    s += nisipAdaugat(i, j);
            return 0;
        }

    3)
        a. Algoritmul implemenatat citeste de la tastatura 2 numere X si Y, dupa care un sir ordonat de numere, urmand sa contorizeze
        numrele distincte ce apar in acel sir si apartin intervalului [X, Y].
            Din punct de vedere al complexitatii timp, algoritmul are o complexitate O(n), data de citirea datelor, identificarea 
        contorului cerut fiind facuta inca din procesul de citire.
            Din punct de vedere al complexitatii spatiu, algoritmul are o complexitate O(1), deoarece s-au folosit doar structuri de date 
        primitive (5 variabile intregi: X, Y, x, lastX, cnt).

        b.
            #include <iostream>
            #include <fstream>

            using namespace std;

            ifstream fin("bac.txt");

            int main() {
                int X, Y, x, lastX, cnt = 0;

                fin >> x;

                lastX = x;
                if(lastX >= X && lastX <= Y)
                    cnt++;
                    
                while(fin >> x) {
                    if(x != lastX) {
                        lastX = x;
                        if(lastX >= X && lastX <= Y)
                            cnt++;
                    }
                }
                cout << cnt;
                return 0;
            }