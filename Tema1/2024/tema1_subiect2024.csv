ITEM ,RĂSPUNS ,BAREM,PUNCTAJ ACTUAL,PUNCTAJ MAXIM,OBSERVATII
1.1,a,a,4,4,
1.2,c,d,0,4,gresit
1.3,b,c,0,4,gresit
1.4,d,d,4,4,
1.5,b,b,4,4,
2.1.a,9,9,6,6,
2.1.b,"6, 10","valori naturale din reuniunea intervalelor de forma [2∙3^k,3^(k+1)), cu k număr natural, k∈{1,2,3,4,5}.",4,6,"2p pentru numar corect de numere, 2p pt primul număr corect, ultimul numar e gresit"
2.1.c,"int main () 
{
    cin >> n;
    p = 1;
    for (i = 1; i <= n; i++)
    {
        cin >> x;
        do 
            x = x/3;
        while(x>3);
        if (x)
            p = p*x;
    }
    return 0;
}
","#include <iostream>
using namespace std;

int main () 
{
    int n, p, i, x;
    cin >> n;
    p = 1;
    for (i = 1; i <= n; i++)
    {
        cin >> x;
        do 
            x = x/3;
        while(x>3);
        if (x)
            p = p*x;
    }
    cout << p;
    return 0;
}",7,10,"1p pierdut pe corectitudinea programului, 1p pe lipsa declararii variabilelor, 1p pierdut pe lipsa afisarii"
2.1.d,"citește n (număr natural nenul)
p = 1
i = 1

repetă
    citește x (număr natural)
    repetă
        x = ⌊ x / 3 ⌋
    până când x ≤ 3
    dacă x ≠ 0 atunci
        p = p * x
    i = i + 1
până când i ≤ n
","citește n (număr natural nenul)
p ← 1
i ← 1

cât timp i ≤ n execută
    citește x (număr natural)
    repetă
        x ← ⌊ x / 3 ⌋
    până când x ≤ 3
    dacă x ≠ 0 atunci
        p ← p * x
    i ← i + 1
",4,6,2p pierdute pe utilizarea structurii repetitive gresite (do while in loc de while)
2.2,"2, 5, 4","2, 3, 1, 7",4,6,e lanț elementar (2p) și are o extremitate în rădăcină (2p) dar nu e cel mai lung
2.3,"for (int i = 0; i < 9; i++)
    for (int j = 0; j < 9; j++)
        if(i + j < 4 || i + j > 12)
            a[i][j] = 2;
        else a[i][j] = 4;
       
","for (int i = 0; i < 9; i++)
    for (int j = 0; j < 9; j++)
        if(i + j < 4 || i + j > 12)
            a[i][j] = 4;
        else a[i][j] = 2;
        ",2,6,valorile nu sunt atribuite conform cerinței
3.1,"int majorImpar(int a, int b)
{
    int i, sumPar, sumImpar;
    for (int i = a; i <= b; i++)
    {
        for (int d = 2; d <= i/2; d++)
        {
            sumPar = sumImpar = 0;
            if(i % d == 0)
                if(d % 2 == 0)
                    sumPar += d;
                else
                    sumImpar += d;
        }
        if (sumImpar > sumPar)
            return i;
    }
    return 0;
}","int majorImpar(int a, int b)
{
    int i, sumPar, sumImpar;
    for (int i = a; i <= b; i++)
    {
        sumPar = sumImpar = 0;
        for (int d = 2; d <= i/2; d++)
        {
            if(i % d == 0)
                if(d % 2 == 0)
                    sumPar += d;
                else
                    sumImpar += d;
        }
        if (sumImpar > sumPar)
            return i;
    }
    return 0;
}",2,10,corecte doar titlul subprogramulului si parametrii de intrare. Greseste prin a reseta suma divizorilor mereu la 0.
3.2,"#include <iostream>
using namespace std;

int main ()
{
    char text[101];
    cin.getline(text, 101);
    char * p = strtok(text, "" "");
    int n = strlen(p);
    bool ok = true;
    while (p)
    {
        if (n != strlen(p))
            ok = false;
        p = strtok(NULL, "" "");
    }
    if(ok)
        cout << ""DA "";
    else
        cout << ""GRESIT"";
}","#include <iostream>
#include <cstring>
using namespace std;

int main ()
{
    char text[101];
    cin.getline(text, 101);
    char * p = strtok(text, "" "");
    int n = strlen(p);
    bool ok = true;
    while (p)
    {
        if (n != strlen(p))
            ok = false;
        p = strtok(NULL, "" "");
    }
    if(ok)
        cout << ""DA ""<< n;
    else
        cout << ""NU"";
    return 0;
}",8,10,"1p pierdut prin faptul ca nu se afiseaza datele in formatul cerut, 1p pe faptul ca programul nu e corect general (lipseste include <cstring>, return 0"
3.3.a,"Pe măsură ce citim datele din fișier, determinăm și reținem în variabila maxLen lungimea celei mai lungi secvențe de numere consecutive care sunt strict crescătoare și plasate pe poziții succesive în șir. Algoritmul utilizat este unul eficient din punct de vedere al timpului de execuție, având complexitate liniară. Pentru a reduce consumul de memorie, nu vom stoca toate valorile din secvență, ci doar ultimul element al secvenței maxime identificate, în variabila lastElem. Dacă secvența găsită conține cel puțin două elemente, afișăm cele maxLen valori în ordine crescătoare. În cazul în care nu există o astfel de secvență, afișăm mesajul „nu există”","Pe măsură ce citim datele din fișier, determinăm și reținem în variabila maxLen lungimea celei mai lungi secvențe de numere consecutive care sunt strict crescătoare și plasate pe poziții succesive în șir. Algoritmul utilizat este unul eficient din punct de vedere al timpului de execuție, având complexitate liniară. Pentru a reduce consumul de memorie, nu vom stoca toate valorile din secvență, ci doar ultimul element al secvenței maxime identificate, în variabila lastElem. Dacă secvența găsită conține cel puțin două elemente, afișăm cele maxLen valori în ordine crescătoare. În cazul în care nu există o astfel de secvență, afișăm mesajul „nu există”",2,2,
3.3.b,"#include <iostream>
using namespace std;

int main ()
{
    int x, y, len, maxLen = 0, lastElem = 0;
    cin >> x;
    len = 1;
    while (cin >> y)
    {
        if(x+1 ==  y)
            len++;
        else
        {
            if(len > maxLen)
            {
                maxLen = len;
                lastElem = x;
            }
            len = 1;
        }
        x = y;
    }
    if (len > maxLen)
    {
        maxLen = len;
        lastElem = x; 
    }
    return 0;
}","#include <iostream>
#include <fstream>
using namespace std;

int main ()
{
    ifstream fin(""bac.txt"");
    int x, y, len, maxLen = 0, lastElem = 0;
    fin >> x;
    len = 1;
    while (fin >> y)
    {
        if(x+1 ==  y)
            len++;
        else
        {
            if(len > maxLen)
            {
                maxLen = len;
                lastElem = x;
            }
            len = 1;
        }
        x = y;
    }
    if (len > maxLen)
    {
        maxLen = len;
        lastElem = x; 
    }
    if(maxLen >= 2)
        for(int i = lastElem - maxLen + 1; i <= maxLen; i++)
            cout << i << ' ';
    else
        cout << ""nu exista"";
    return 0;
}",6,8,"1p pierdut pe neindeplinirea operatiilor cu fisiere, 1p pierdut pe netratarea cazului ""nu exista"" si pe neafisarea variabilelor"