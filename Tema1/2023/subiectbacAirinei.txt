Greseli:
Grila 1 si 4
N am citit x la punctul c de la sub II 1
O varianata de la punctul b de la sub II 1 este gresita 
Un raspuns de la backtracking este gresit
Nu am initializat ns si np la Sub II 2
Nu am pus #include <fstream> la ultima problema
Subiectul I
1.C
2.C
3.C
4.D
5.A

Subiectul II
1.
a.9752
b.543 785
c.
#include <iostream>

using namespace std;

int main()
{
    int x,p=1,m=-1;
 
    while(p<=x)
    {

        int c=(x/p) %10;
        if (c>m)
            m=c,p*=10;
        else
            x=(x/(p*10))*p+x%p;
    }

    if(m>=0)
        cout<<x;
        else cout<<"nul";
    return 0;
}

d.
citeşte x (număr natural)
 p1; m -1 ok0 c-5
┌execută
│ daca ok!=0 atunci
│ c[x/p]%10
│ ok1
│
│┌dacă c>m atunci
││ mc; pp*10
││altfel
││ x[x/(p*10)]*p+x%p
││    
│└■cât timp p≤x
└■
┌dacă m≥0 atunci scrie x
│ altfel scrie "nul" 

2.
(mare, ploaie)
(ocean, ploaie, râu)

3.
struct stock{
int nrFire;
int pretFir;

};
struct lalea{
char denumire[21];
stock stoc;
}f[11];


Subiectul III
1.
bool abundent(int n)
{
    double s=0;
    for (int i=1; i<=n; i++)
        if (n%i==0)
            s=s+double(i);
    double r=s/n;
    for(int j=1; j<n; j++)
    {
        double s=0;
        for (int i=1; i<=j; i++)
            if (j%i==0)
                s=s+double(i);

        double r1=s/j;

        if(r1>r)

            return 0;
    }
    return 1;

}
2.
#include <iostream>

using namespace std;
int mat[1005][1005];
int main()
{

    
    cin>>ns>>np;
    int v[1005];
    int poz[1005];
    for(int i=1; i<=ns; i++)
    {
        v[i]=-1;
        for(int j=1; j<=np; j++)
        {
            cin>>mat[i][j];
            if(mat[i][j]>v[i])
                {v[i]=mat[i][j];
                poz[i]=j;

                }

        }
    }
    for(int i=1; i<=ns; i++)
        cout<<i<<':'<<poz[i]<<' ';
    return 0;
}
3.
a. Vom folosi un vector de frecventa pentru a tine minte aparitia sufixelor si a prefixelor si inca un vector de la 10 la 99 unde vom adauga 1 daca bagam un prefix si scadea 1 daca avem un sufix la final vom numara numerele care au vectorul de apartii nenul si cele care au suma din  celalat vector 0. Solutia este eficeinta din punct de vedere a timpului de esecutie deoarece face operatiile si iteratiile intr un timp linear O(n).
b.
#include <iostream>


using namespace std;
ifstream f("bac.txt");
int v[100];
bool apa[100];

int main()
{int x;
    while(f>>x)
    { int suf, pre;
        if(x>=100)
        {   suf=x%100;
            v[suf]--;
            apa[suf]=1;


        }
        if(x<1000)
        {
            pre=x/10;
            v[pre]++;
            apa[pre]=1;
        }
        else
        {pre=x/100;
            v[pre]++;
            apa[pre]=1;

        }
    }
    int nr=0;
    for(int i=10;i<100;i++)
        if(v[i]==0 && apa[i]==1)
               nr++;
    cout<<nr;
    return 0;
}



